{ config, pkgs, ... }:

{
# Home Manager needs a bit of information about you and the paths it should
# manage.
    home.username = "{{ .chezmoi.group }}";
    home.homeDirectory = "{{ .chezmoi.homeDir }}";

# This value determines the Home Manager release that your configuration is
# compatible with. This helps avoid breakage when a new Home Manager release
# introduces backwards incompatible changes.
#
# You should not change this value, even if you update Home Manager. If you do
# want to update the value, then make sure to first check the Home Manager
# release notes.
    home.stateVersion = "24.05"; # Please read the comment before changing.

# The home.packages option allows you to install Nix packages into your
# environment.
        home.packages = with pkgs; [
# MARK: CLI Utilities
            pkgs.lsd
            pkgs.bat
            pkgs.curlie
            pkgs.zoxide
            pkgs.bitwarden-cli
            pkgs.chezmoi
            pkgs.cloc
            pkgs.fzf
            pkgs.difftastic
            pkgs.cowsay
            pkgs.fd
            pkgs.github-cli
            pkgs.imagemagick
            pkgs.pipx
            pkgs.ripgrep
            pkgs.sccache
            pkgs.wget
            pkgs.direnv

{{ if eq .chezmoi.os "darwin" }}
            pkgs.xcbeautify
{{ end }}


# MARK: Languages
            pkgs.go

# MARK: CLI Programs
            pkgs.lazygit
            pkgs.neovim
            pkgs.htop
            pkgs.tmux

# MARK: Software

{{ if eq .chezmoi.os "linux" }}
            pkgs.handbrake
            pkgs.krita
            pkgs.inkscape
{{ end }}
            pkgs.wezterm

# {{ if eq .chezmoi.os "darwin" }}
#         pkgs.aerospace
# {{ end }}

# # It is sometimes useful to fine-tune packages, for example, by applying
# # overrides. You can do that directly here, just don't forget the
# # parentheses. Maybe you want to install Nerd Fonts with a limited number of
# # fonts?
# (pkgs.nerdfonts.override { fonts = [ "FantasqueSansMono" ]; })

# # You can also create simple shell scripts directly inside your
# # configuration. For example, this adds a command 'my-hello' to your
# # environment:
# (pkgs.writeShellScriptBin "my-hello" ''
#   echo "Hello, ${config.home.username}!"
# '')
        ];

# Home Manager is pretty good at managing dotfiles. The primary way to manage
# plain files is through 'home.file'.
# home.file = {
# # Building this configuration will create a copy of 'dotfiles/screenrc' in
# # the Nix store. Activating the configuration will then make '~/.screenrc' a
# # symlink to the Nix store copy.
# ".screenrc".source = dotfiles/screenrc;

# # You can also set the file content immediately.
# ".gradle/gradle.properties".text = ''
#   org.gradle.console=verbose
#   org.gradle.daemon.idletimeout=3600000
# '';
# };

    programs.git = {
        enable = true;
        userName = "jackhamilton";
        userEmail = "jackham800@gmail.com";
    };

    programs.zsh = {
        enable = true;
        enableCompletion = true;
        plugins = [
        {
            name = "zsh-nix-shell";
            file = "nix-shell.plugin.zsh";
            src = pkgs.fetchFromGitHub {
                owner = "chisui";
                repo = "zsh-nix-shell";
                rev = "v0.8.0";
                sha256 = "1lzrn0n4fxfcgg65v0qhnj7wnybybqzs4adz7xsrkgmcsr0ii8b7";
            };
        }
        ];
    };

    programs.direnv = {
        enable = true;
        enableZshIntegration = true;
        nix-direnv.enable = true;
    };

# Home Manager can also manage your environment variables through
# 'home.sessionVariables'. These will be explicitly sourced when using a
# shell provided by Home Manager. If you don't want to manage your shell
# through Home Manager then you have to manually source 'hm-session-vars.sh'
# located at either
#
#  ~/.nix-profile/etc/profile.d/hm-session-vars.sh
#
# or
#
#  ~/.local/state/nix/profiles/profile/etc/profile.d/hm-session-vars.sh
#
# or
#
#  /etc/profiles/per-user/jack/etc/profile.d/hm-session-vars.sh
#
    home.sessionVariables = {
        EDITOR = "nvim";
        ISNIXSHELL = "yes";
    };

# Let Home Manager install and manage itself.
    programs.home-manager.enable = true;
}
