local function get_sourcekit()
   local mac = vim.fn.OSX()
    if mac == 1 then
        return {
            cmd = { "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/sourcekit-lsp",
                "-Xclangd",
                "-DCMAKE_C_COMPILER_LAUNCHER=$(which sccache)",
                "-Xclangd",
                "-DCMAKE_CXX_COMPILER_LAUNCHER=$(which sccache)",
                "--default-workspace-type",
                "buildServer" },
            capabilities = {
                workspace = {
                    didChangeWatchedFiles = {
                        dynamicRegistration = true
                    }
                }
            },
            root_dir = vim.fs.root(0, "*.xcworkspace"),
        }
    else
        return {
            capabilities = {
                workspace = {
                    didChangeWatchedFiles = {
                        dynamicRegistration = true
                    }
                }
            },
            root_dir = vim.fs.root(0, "*.xcworkspace"),
        }
    end
end

return {
    {
        'neovim/nvim-lspconfig',
        {{ if eq .chezmoi.os "darwin" }}
        lazy = false, -- REQUIRED: tell lazy.nvim to start this plugin at startup
        dependencies = {
            -- main one
            { "ms-jpq/coq_nvim", branch = "coq" },

            -- 9000+ Snippets
            { "ms-jpq/coq.artifacts", branch = "artifacts" },
        },
        init = function()
            vim.g.coq_settings = {
                auto_start = true, -- if you want to start COQ at startup
                -- Your COQ settings here
            }
        end,
        opts = {
            servers = {
                lua_ls = {},
                ts_ls = {},
                sourcekit = {},
                gdscript = {
                    name = "godot",
                    cmd = vim.lsp.rpc.connect("127.0.0.1", 6005),
                },
            }
        },
        config = function(_, opts)
            local lspconfig = require('lspconfig')
            local coq = require('coq')
            for server, config in pairs(opts.servers) do
                lspconfig[server].setup(coq.lsp_ensure_capabilities(config))
            end
        end
    {{ else }}
        dependencies = { 'saghen/blink.cmp' },
        opts = {
            servers = {
                lua_ls = {},
                ts_ls = {},
                sourcekit = get_sourcekit(),
                gdscript = {
                    name = "godot",
                    cmd = vim.lsp.rpc.connect("127.0.0.1", 6005),
                },
            }
        },
        config = function(_, opts)
            local lspconfig = require('lspconfig')
            for server, config in pairs(opts.servers) do
                -- passing config.capabilities to blink.cmp merges with the capabilities in your
                -- `opts[server].capabilities, if you've defined it
                config.capabilities = require('blink.cmp').get_lsp_capabilities(config.capabilities)
                lspconfig[server].setup(config)
            end
        end
    {{ end }}
    },
}
